/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jframe;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import javax.smartcardio.Card;
import javax.smartcardio.CardChannel;
import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.smartcardio.TerminalFactory;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import soap.common.DetailShopOrder;
import soap.common.Membership;
import soap.common.Shop;
import soap.common.ShopItem;

/**
 *
 * @author yifeng
 */
public class OrderManagementUI extends javax.swing.JFrame {
    
    // to read in card info
    private CardTerminal acr122uCardTerminal = null;

    private DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"ItemId", "Name", "Quantity", "Price"});
    private String shopId;
    private Shop shop;
    private ShopItem shopItem;
    private float totalPrice = 0;
    private int rowSelected = -1;
    private List<DetailShopOrder> detailOrders;
    private DetailShopOrder currentOrder;
    private boolean existingOrder = false;
    private int counter = 0;
    private String restTitle;
    private Membership mem;

    //private Shop shop = null;
    /**
     * Creates new form OrderManagementUI
     */
    public OrderManagementUI() {
        initComponents();
    }

    public OrderManagementUI(String shopId) {
        initComponents();
        this.shopId = shopId;
    }
    
    public OrderManagementUI(String shopId, String restTitle) {
        initComponents();
        this.shopId = shopId;
        this.restTitle = restTitle;
    }

    public OrderManagementUI(DefaultTableModel tableModel, String shopId, float totalPrice, List<DetailShopOrder> detailOrders) {
        initComponents();
        this.tableModel = tableModel;
        this.shopId = shopId;
        this.totalPrice = totalPrice;
        this.detailOrders = detailOrders;
        this.setSelectionModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonCheckOut = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldBarcode = new javax.swing.JTextField();
        jButtonAddItem = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButtonClear = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButtonDeleteItem = new javax.swing.JButton();
        jButtonUpdateItem = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldMemberId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButtonReadMember = new javax.swing.JButton();
        jButtonLogout = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1024, 768));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 204, 255));
        jLabel1.setText("Order Management");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButtonCheckOut.setText("Check Out");
        jButtonCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckOutActionPerformed(evt);
            }
        });

        jLabel2.setText("Total Price: ");

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel8.setText("Barcode :");

        jTextFieldBarcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBarcodeActionPerformed(evt);
            }
        });
        jTextFieldBarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldBarcodeKeyReleased(evt);
            }
        });

        jButtonAddItem.setText("Add Item");
        jButtonAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddItemActionPerformed(evt);
            }
        });

        jLabel7.setText("Quantity :");

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
        });

        jLabel9.setText("Item Name :");

        jLabel10.setText("Name");

        jLabel11.setText("Category :");

        jLabel12.setText("Category");

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jLabel5.setText("Price :");

        jLabel13.setText("$0");

        jButtonDeleteItem.setText("Delete Item");
        jButtonDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteItemActionPerformed(evt);
            }
        });

        jButtonUpdateItem.setText("Update Item");
        jButtonUpdateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateItemActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButtonAddItem)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonUpdateItem)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonDeleteItem)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonClear)
                .add(25, 25, 25))
            .add(jPanel2Layout.createSequentialGroup()
                .add(44, 44, 44)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel11)
                            .add(jLabel9)
                            .add(jLabel5))
                        .add(30, 30, 30)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel12)
                            .add(jLabel10)
                            .add(jLabel13)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel8)
                            .add(jLabel7))
                        .add(26, 26, 26)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jTextFieldBarcode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jTextFieldBarcode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(jLabel10))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(jLabel12))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jLabel13))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 43, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonAddItem)
                    .add(jButtonClear)
                    .add(jButtonDeleteItem)
                    .add(jButtonUpdateItem))
                .add(23, 23, 23))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Member Id:");

        jTextFieldMemberId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMemberIdActionPerformed(evt);
            }
        });

        jLabel4.setText("Member Discount: ");

        jLabel14.setText("0%");

        jButtonReadMember.setText("Read Member Card");
        jButtonReadMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadMemberActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButtonReadMember)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel14)
                            .add(jTextFieldMemberId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 164, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(9, 9, 9)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jTextFieldMemberId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jLabel14))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 34, Short.MAX_VALUE)
                .add(jButtonReadMember)
                .add(25, 25, 25))
        );

        jButtonLogout.setText("Logout");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        jLabel6.setText("CIR ZARA");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jButtonCheckOut)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 432, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(282, 282, 282)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(261, 261, 261)
                        .add(jButtonLogout)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 439, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(88, 88, 88)
                .add(jLabel6)
                .add(79, 79, 79))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonCheckOut)
                    .add(jButtonLogout))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadTable();
        System.out.println("shopId " + shopId);
        shop = getShopById(Long.valueOf(shopId));
        jLabel6.setText(shop.getShopName());
        if((restTitle != null) && (restTitle.equals("RestaurantCashier")))
            jLabel1.setText("Restaurant Order Management");
        
        //read card info
        try 
        {
            ActionListener actionListenerQuitOnNoReaderAttached = new ActionListener() 
            {
                public void actionPerformed(ActionEvent event)
                {
                    quitOnNoReaderAttached();
                }
            };

            Timer timerQuitOnNoReaderAttached = new Timer(5000, actionListenerQuitOnNoReaderAttached);
            timerQuitOnNoReaderAttached.setRepeats(false);
            timerQuitOnNoReaderAttached.start();

            TerminalFactory terminalFactory = TerminalFactory.getDefault();

            if (!terminalFactory.terminals().list().isEmpty()) 
            {
                for (CardTerminal cardTerminal : terminalFactory.terminals().list()) 
                {
                    if (cardTerminal.getName().contains("ACS ACR122")) 
                    {
                        acr122uCardTerminal = cardTerminal;

                        break;
                    }
                }

                if (acr122uCardTerminal != null) 
                {
                    timerQuitOnNoReaderAttached.stop();                    

                    ActionListener actionListenerCheckCardPresent = new ActionListener() 
                    {
                        public void actionPerformed(ActionEvent event) 
                        {
                            checkCardPresent();
                        }
                    };

                    Timer timerCheckCardPresent = new Timer(1000, actionListenerCheckCardPresent);
                    timerCheckCardPresent.setRepeats(true);
                    timerCheckCardPresent.start();

                    //JOptionPane.showMessageDialog(this, "ACS ACR122U Reader detected successfully", "Reader Detected Successful", JOptionPane.INFORMATION_MESSAGE);
                } 
                else 
                {
                    JOptionPane.showMessageDialog(this, "Unable to detect ACS ACR122U Reader", "Reader Detected Failure", JOptionPane.ERROR_MESSAGE);
                    this.setVisible(false);
                    this.dispose();
                }
            } 
            else 
            {
//                JOptionPane.showMessageDialog(this, "No card reader is attached", "Reader Detected Failure", JOptionPane.ERROR_MESSAGE);
//                this.setVisible(false);
//                this.dispose();
            }
        } 
        catch (Exception ex) 
        {
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButtonCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckOutActionPerformed
        // TODO add your handling code here:
        //initialize with order information later
        PaymentUI paymentUI = new PaymentUI(tableModel, shopId, totalPrice, detailOrders);
        this.setVisible(false);
        paymentUI.setVisible(true);
    }//GEN-LAST:event_jButtonCheckOutActionPerformed

    private void jTextFieldMemberIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMemberIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMemberIdActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        // TODO add your handling code here:
        ShoppingMallLoginUI mainMenuUI = new ShoppingMallLoginUI();
        this.setVisible(false);
        mainMenuUI.setVisible(true);
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextFieldBarcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBarcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldBarcodeActionPerformed

    private void setAllToInitial() {
        jTextFieldBarcode.setText("");
        jLabel10.setText("Name");
        jLabel12.setText("Category");
        jTextField4.setText("");
        jLabel13.setText("$0");
    }
    private void jTextFieldBarcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBarcodeKeyReleased
        // TODO add your handling code here:
        if (jTextFieldBarcode.getText().length() == 0) {
            this.setAllToInitial();
        }

        if (jTextFieldBarcode.getText().length() == 13) {
            shopItem = getShopItemByBarcode(shopId, jTextFieldBarcode.getText());
            if (shopItem != null) {
                jLabel10.setText(shopItem.getName());
                jLabel12.setText(shopItem.getCategory());
            } else {
                JOptionPane.showMessageDialog(this, "No item found with such barcode", "Database Error", JOptionPane.INFORMATION_MESSAGE);
                jTextFieldBarcode.setText("");
            }
        }
    }//GEN-LAST:event_jTextFieldBarcodeKeyReleased

    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased
        // TODO add your handling code here:
        if (shopItem != null) {
            if (!jTextField4.getText().equals("")) {
                int quantity = Integer.parseInt(jTextField4.getText());
                if (quantity > shopItem.getQuantity()) {
                    jTextField4.setText("");
                    jLabel13.setText("$0");
                    JOptionPane.showMessageDialog(this, "Inventory is insufficient for this item " + shopItem.getQuantity() + " left.", "Inventory Error", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    jLabel13.setText("$" + (quantity * shopItem.getPrice()));
                }
            } else {
                jLabel13.setText("$0");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please scan in correct barcode first", "Operational Error", JOptionPane.INFORMATION_MESSAGE);
            jTextField4.setText("");
        }
    }//GEN-LAST:event_jTextField4KeyReleased

    private void jButtonAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddItemActionPerformed
        // TODO add your handling code here:
        if (shopItem != null) {
            if (!jTextField4.getText().equals("")) {
                //create new shopping order, check unique first
                if (detailOrders != null) {
                    System.out.println("size of detailOrders " + detailOrders.size());
                    for (DetailShopOrder detailO : detailOrders) {
                        if ((detailO != null) && (jTextFieldBarcode.getText().equals(detailO.getBarcode().toString()))) {
                            existingOrder = true;
                            break;
                        }
                    }
                } else {
                    detailOrders = new ArrayList();
                }
                if (existingOrder) {// order already created
                    JOptionPane.showMessageDialog(this, "Item already scanned, you may choose the item and update the quantity", "Operational Error", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    // set up currentOrder
                    currentOrder = new DetailShopOrder();
                    currentOrder.setShopId(Long.parseLong(shopId));
                    currentOrder.setShopName(shop.getShopName());
                    currentOrder.setQuantity(Integer.parseInt(jTextField4.getText()));
                    currentOrder.setItemId(shopItem.getId());
                    currentOrder.setBarcode(shopItem.getBarcode());
                    currentOrder.setName(shopItem.getName());
                    currentOrder.setCategory(shopItem.getCategory());
                    currentOrder.setUnitPrice(shopItem.getPrice());
                    currentOrder.setTotalPrice(currentOrder.getUnitPrice() * currentOrder.getQuantity());

                    tableModel.addRow(new Object[]{shopItem.getId(), shopItem.getName(), jTextField4.getText(), jLabel13.getText().substring(1)});
                    jTable1.setModel(tableModel);
                    //set onclick listener
                    this.setSelectionModel();
                    totalPrice += currentOrder.getTotalPrice();
                    detailOrders.add(currentOrder);
                    currentOrder = null;
                    jLabel2.setText("Total Price : $ " + totalPrice);
                    this.setAllToInitial();
                }
                existingOrder = false;
                //this.setAllToInitial();
            } else {
                JOptionPane.showMessageDialog(this, "Please input a quantity first", "Operational Error", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please scan in a correct barcode first", "Operational Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonAddItemActionPerformed

    private void setSelectionModel() {
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (jTable1.getSelectedRow() != -1) {
                    counter++;
                    rowSelected = jTable1.getSelectedRow();
                    shopItem = getShopItemByItemId((Long) jTable1.getValueAt(jTable1.getSelectedRow(), 0));

                    if (shopItem != null) {
                        jTextFieldBarcode.setText(shopItem.getBarcode().toString());
                        jLabel10.setText(shopItem.getName());
                        jLabel12.setText(shopItem.getCategory());
                        jTextField4.setText((String) jTable1.getValueAt(jTable1.getSelectedRow(), 2));
                        jLabel13.setText("$" + jTable1.getValueAt(jTable1.getSelectedRow(), 3));

                        for (DetailShopOrder dorder : detailOrders) {
                            if (dorder.getBarcode().equals(shopItem.getBarcode())) {
                                //System.out.println("identified current order");
                                currentOrder = dorder;
                                break;
                            }
                        }
                        //checking purpose
                        if (currentOrder == null) {
                            System.out.println("current order should not be null");
                        }
                        //update total price

                    } else {
                        System.out.println("shop item is null");
                    }
                }
            }
        });
    }

    private void jButtonDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteItemActionPerformed
        // TODO add your handling code here:
        if (rowSelected != -1) {
            tableModel.removeRow(rowSelected);
            totalPrice -= currentOrder.getTotalPrice();
            jLabel2.setText("Total Price : $ " + totalPrice);
            detailOrders.remove(currentOrder);
            currentOrder = null;
            this.setAllToInitial();
            rowSelected = -1;
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row first", "Operational Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonDeleteItemActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
        this.setAllToInitial();
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void deleteRowWithOrder(DetailShopOrder currentOrder){
        for (int rowIndex = 0; rowIndex < jTable1.getRowCount(); rowIndex++) {  
            String key = jTable1.getValueAt(rowIndex, 0).toString();
            if(key.equals(currentOrder.getItemId().toString())){
                tableModel.removeRow(rowIndex);
                break;
            }
      }
    }
    
    private void jButtonUpdateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateItemActionPerformed
        // TODO add your handling code here:
        if (rowSelected != -1) {
            tableModel.removeRow(rowSelected);
        }

        if ((currentOrder == null) && (!jTextFieldBarcode.getText().equals(""))) {
            for (DetailShopOrder dorder : detailOrders) {
                if (dorder.getBarcode().equals(Long.parseLong(jTextFieldBarcode.getText()))) {
                    //System.out.println("identified current order");                    
                    currentOrder = dorder;                    
                    this.deleteRowWithOrder(currentOrder);
                    break;
                }
            }
        }
        if (currentOrder != null) {
            totalPrice -= currentOrder.getTotalPrice();
            currentOrder.setQuantity(Integer.parseInt(jTextField4.getText()));
            currentOrder.setTotalPrice(currentOrder.getUnitPrice() * currentOrder.getQuantity());
            totalPrice += currentOrder.getTotalPrice();
            jLabel2.setText("Total Price : $ " + totalPrice);

            tableModel.addRow(new Object[]{shopItem.getId(), shopItem.getName(), jTextField4.getText(), jLabel13.getText().substring(1)});
            jTable1.setModel(tableModel);

            shopItem = null;
            currentOrder = null;
            counter = 0;
            this.setAllToInitial();
        } else {
            JOptionPane.showMessageDialog(this, "This item is not in the list yet, you can add it to order instead of update it", "Operational Error", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButtonUpdateItemActionPerformed

    private void jButtonReadMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadMemberActionPerformed
        // TODO add your handling code here:
        byte[] byteArrayReadUID = { (byte)0xFF, (byte)0xCA, (byte)0x00, (byte)0x00, (byte)0x00 };
        String cardNumber = "Get UID: " + connectToCard(byteArrayReadUID) + "\r\n";
        System.out.println("card number read is " + cardNumber);
        jTextFieldMemberId.setText(cardNumber);
//        mem = getMemberAccountByNFCCardNum(cardNumber);
//        if(mem == null){
//            JOptionPane.showMessageDialog(this, "Customer is not a member or card is invalid", "Member not found", JOptionPane.INFORMATION_MESSAGE);
//        }else{
//            jTextFieldMemberId.setText(mem.getId().toString());
//        }
    }//GEN-LAST:event_jButtonReadMemberActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderManagementUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddItem;
    private javax.swing.JButton jButtonCheckOut;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonDeleteItem;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JButton jButtonReadMember;
    private javax.swing.JButton jButtonUpdateItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextFieldBarcode;
    private javax.swing.JTextField jTextFieldMemberId;
    // End of variables declaration//GEN-END:variables

    private void loadTable() {

        jTable1.setModel(tableModel);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(200);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(100);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(100);
        jLabel2.setText("Total Price : $ " + totalPrice);
    }
    
    private String connectToCard(byte[] byteArrayReadUID) 
    {
        try 
        {
            acr122uCardTerminal.waitForCardPresent(0);
            Card card = acr122uCardTerminal.connect("T=1");
            CardChannel cardChannel = card.getBasicChannel();
            
            return send(byteArrayReadUID, cardChannel);                        
        }
        catch (Exception ex) 
        {
            return "";
        }
    }
    
    public String send(byte[] command, CardChannel cardChannel) 
    {
        String response = "";

        byte[] byteArrayResponse = new byte[258];
        ByteBuffer bufferedCommand = ByteBuffer.wrap(command);
        ByteBuffer bufferedResponse = ByteBuffer.wrap(byteArrayResponse);

        // output = The length of the received response APDU
        int output = 0;

        try 
        {
            output = cardChannel.transmit(bufferedCommand, bufferedResponse);
        } 
        catch (CardException ex) 
        {
            ex.printStackTrace();
        }

        for (int i = 0; i < output; i++) 
        {
            response += String.format("%02X", byteArrayResponse[i]);
        }

        return response;
    }
    
    private void checkCardPresent()
    {
        try 
        {
            if (acr122uCardTerminal.isCardPresent()) 
            {
//                jTextFieldMemberId.setText("card present");
//                jTextFieldMemberId.setForeground(Color.GREEN);
            } 
            else 
            {
//                jTextFieldMemberId.setText("card not present");
//                jTextFieldMemberId.setForeground(Color.RED);
            }
        } 
        catch (Exception ex) 
        {
        }
    }

    private void quitOnNoReaderAttached()
    {
//        JOptionPane.showMessageDialog(this, "No card reader is attached", "Reader Detected Failure", JOptionPane.ERROR_MESSAGE);
//        this.setVisible(false);
//        this.dispose();
    }
    
    private static Shop getShopById(long shopId) {
        soap.common.CommonFunctionsUPOS_Service service = new soap.common.CommonFunctionsUPOS_Service();
        soap.common.CommonFunctionsUPOS port = service.getCommonFunctionsUPOSPort();
        return port.getShopById(shopId);
    }

    private static java.util.List<soap.common.ShopItem> getShoppingMallItemsByShopId(long shopId) {
        soap.common.CommonFunctionsUPOS_Service service = new soap.common.CommonFunctionsUPOS_Service();
        soap.common.CommonFunctionsUPOS port = service.getCommonFunctionsUPOSPort();
        return port.getShoppingMallItemsByShopId(shopId);
    }

    private static ShopItem getShopItemByItemId(long itemId) {
        soap.common.CommonFunctionsUPOS_Service service = new soap.common.CommonFunctionsUPOS_Service();
        soap.common.CommonFunctionsUPOS port = service.getCommonFunctionsUPOSPort();
        return port.getShopItemByItemId(itemId);
    }

    private static ShopItem getShopItemByBarcode(java.lang.String shopId, java.lang.String barcode) {
        soap.common.CommonFunctionsUPOS_Service service = new soap.common.CommonFunctionsUPOS_Service();
        soap.common.CommonFunctionsUPOS port = service.getCommonFunctionsUPOSPort();
        return port.getShopItemByBarcode(shopId, barcode);
    }

    private static Membership getMemberAccountByNFCCardNum(java.lang.String nfcCardNum) {
        soap.common.CommonFunctionsUPOS_Service service = new soap.common.CommonFunctionsUPOS_Service();
        soap.common.CommonFunctionsUPOS port = service.getCommonFunctionsUPOSPort();
        return port.getMemberAccountByNFCCardNum(nfcCardNum);
    }
}
